#:kivy 2.1.0

#:set s dp(100) 


CanvasExample7:

<CanvasExample6>:
    RelativeLayout:
        text:"yar"
        canvas:
        #canvas is always at 0, 0 except for the relatve layout. relative layout will not have its canvas start at 0,0, but at the layout's start.
        #canvas.before for drawing it first.
            Rectangle:
        pos: 99, 99 

<CanvasExample7@BoxLayout>:
    orientation: 'vertical'
    RelativeLayout:
        canvas:
            Color:
                rgb: 1,0,0
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 1,1,1
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 0,0,1
            Rectangle:
                size: self.size

    



<CanvasExample3>:
    canvas:

        Line:
            # circle: (center_x, center_y, radius)
            circle: (200,200,100)
            width: 8
        Color:
            rgb: .2, .2, .2
            #rgba: red,green,blue + a for alpha
        Line:
            # ellipse: (center_x, center_y, radius_x, radius_y)
            ellipse: (400,400,50,100)
            width: 6
        Line:
            # rectangle: (x, y, w, h)
            rectangle: (400,100,50,70)
            width: 4




<CanvasExample2>:
    canvas:
        Line:
            points: (0, 0.5 * self.height, self.width, 0.5 * self.height)
        Line: 
            points: (0.5 * self.width, 0, 0.5 * self.width, self.height)



<CanvasExample1>:
    canvas:
        Rectangle:
            pos: self.center_x - s/2, self.center_y - s/2
            size: s, s
            ##set: variable value '''sets variable in kv file!'''
        Ellipse:
            pos: 100, 200
            size: s, s/2
        Line:
            # 2 points (x1, y1 , x2, y2) then ... x3,y3,x4,y4 etcetera
            points: (0, 0, 100, 100, 200, 100, self.width, 0)
        Line:
            points: (0, 0, self.width/4, 200, self.width/2, 0, self.width/4*3, 200, self.width, 0)
            width: 2

<CanvasExample4>
    Button:
        text:"move"
        pos: 100,400
        on_press: root.pressed_move()





<ImagesExample@GridLayout>:
    cols:3

    Image:
        source:"images/cake.jpg"
        allow_stretch: False
        keep_ratio: False

    Image:
        source:"images/cake.jpg"
        allow_stretch: True
        keep_ratio: False

    Image:
        source:"images/cake.jpg"
        


<WidgetsExample>:
    cols:3
    ToggleButton:
        text:'off'
        on_state: root.on_toggle_state(self)
        size_hint: None, 1
        width: '120dp'
    Button:
        on_press: root.on_button_click()
        text:"click here"
        disabled : not root.count_enabled
    Label:
        text: root.my_text
        font_name: 'fonts/Lcd.ttf'
        font_size: '80dp'
        color: 0.6, 0.2, 0.1, 1

    Switch:
        id: switch
        on_active: root.on_active_switch(self)
        size_hint: None, 1
        width: '120dp'
        active: True

    Slider: # default = min: 0  ;  max: 100
        id: slider        # with id a 'variable' can be made inside the kv file
        disabled: not switch.active
        min:0
        max:100
        value: 50 # starting pos default value
        # orientation: "vertical"
        on_value: root.on_slider_value(self)
    BoxLayout:
        orientation: 'vertical'
        Label:
            #text: root.my_slider
            text: str(int(slider.value))
        ProgressBar:
            max: 100 # min is always 0
            value: slider.value
    TextInput:
        id: text_input
        size_hint: None, 1
        width: '120dp'
        text: "default text"
        multiline: False
        on_text_validate: root.on_text_validate(self)
    Label:
        text: root.my_text_input


<PageLayoutExample@PageLayout>:
    
    ScrollViewExample:
    GridLayoutExample:
    AnchorLayoutExample:
    BoxLayoutExample:
    

<ScrollViewExample@ScrollView>:
    StackLayoutExample:
        size_hint: 1, None
        height: self.minimum_height

<StacklayoutExample>:
    # sizes of contents need to be specified.

    # orientation: "rl-bt"
    # left-right top-bottom options, default is "lr-tb"
    # padding: ('20dp', '20dp', '20dp', '20dp') #clockwise padding (distance to edge)
    # spacing: '20dp', '20dp' # spacing horizontal , vertical (distance to other elements)

    #Button:
     #   text:"a"
      #  size_hint:0.2, 0.2
    #Button:
     #   text:"b"
      #  size_hint:0.2, 0.2
    #Button:
     #   text:"c"
      #  size_hint:0.2, 0.2
    
    

<GridLayoutExample@GridLayout>:
    # need to specify either rows or columns (rows or cols)

    #cols:2
    rows:2

    Button:
        text:"ff1"
        size_hint: .5, 1 # size_hint None, None gives ability to set fixed size with: 'size: "60dp", "60dp"'. Can also do 1/2 fixed with only one None (.6, None).
    Button:
        text:"ff2"
        size_hint: None, 1
        width:"300dp"
    BoxLayoutExample:
    Button:
        text:"ff4"
        size_hint: .5, 1 # size_hint None, None gives ability to set fixed size with: 'size: "60dp", "60dp"'. Can also do 1/2 fixed with only one None (.6, None).
    Button:
        text:"ff5"
        size_hint: None, 1
        width:"300dp"
    Button:
        text:"ff6"













<AnchorLayoutExample>:

    anchor_x: "right"
    # "right", "left", "center"=(default) (x)
    anchor_y: "top"
    # "bottom", "top", "center"=(default) (y)

    BoxLayout:
        orientation:"vertical"
        size_hint: .2, .2
        Button:
            text:"Weird"

    
        Button:
         
            text:"ok"
    
    #Button:
        
     #   text:"kk"
   
       



<BoxLayoutExample>:
    orientation: "vertical"

    Button:
        size_hint: .8, .3 # percentages (80%, 30% example)
        # size_hint None, None gives ability to set fixed size with: 'size: "60dp", "60dp"'. Can also do 1/2 fixed.
        pos_hint: {"x": 0.1}
        # pos_hint is a dict and works with x, center_x, or right
        # or with y, center_y, top 
        text:"a"
    BoxLayout:
        orientation: "horizontal"
        spacing: "10dp"
        Button:
            text:"b1"
        Button:
            text:"b2"
        Button:
            text:"b3"

    Button:
        text:"c"


<MainWidget>:
    Button:
        text: "No way!"
        size: "60dp", "60dp" # dp is density independant pixel (screens have different pixel density)
        pos: "100dp", "100dp" # dp is a fixed distance on every display
        color: 0,0,1,1 # red, green, blue, alpha (-transparency) *changes text color of button only
    Label:
        text: "wayless!"
        size: "60dp", "60dp" # dp is density independant pixel (screens have different pixel density)
        pos: "220dp", "220dp" # dp is a fixed distance on every display
        color: 1,0,0,1 # red, green, blue, alpha (-transparency)